#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 */

const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, 'public');

const requiredAssets = [
  'icon-search.png',
  'icon-filter.png', 
  'Avito_logo.svg',
  'inc_icon.png',
  'favicon.ico',
  'placeholder-product.svg'
];

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...\n');

let allGood = true;

requiredAssets.forEach(asset => {
  const assetPath = path.join(publicDir, asset);
  const exists = fs.existsSync(assetPath);
  
  if (exists) {
    const stats = fs.statSync(assetPath);
    const size = (stats.size / 1024).toFixed(1);
    console.log(`‚úÖ ${asset} (${size} KB)`);
  } else {
    console.log(`‚ùå ${asset} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    allGood = false;
  }
});

console.log('\n' + '='.repeat(50));

if (allGood) {
  console.log('üéâ –í—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. npm run build');
  console.log('   2. –î–µ–ø–ª–æ–π –Ω–∞ Vercel');
  console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–∫–æ–Ω–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  process.exit(0);
} else {
  console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
  console.log('\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:');
  console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É public/');
  console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏ –≤ –∫–æ–¥–µ');
  console.log('   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: npm run check-assets');
  process.exit(1);
}